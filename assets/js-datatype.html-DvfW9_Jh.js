import{_ as n,o as s,c as a,e}from"./app-UfWKxtAj.js";const t={},l=e(`<h2 id="js数据类型" tabindex="-1"><a class="header-anchor" href="#js数据类型"><span>JS数据类型</span></a></h2><ul><li>基本数据类型： <ul><li>Undefined <ul><li>声明但未对其进行初始化时值即为undefined</li><li>引入是为了区分空对象指针与未经初始化的变量</li><li>对未初始化和未声明的变量执行typeof操作符都会返回undefined，这个结果有逻辑上的合理性(无论对哪种变量都不可能执行真正的操作)</li></ul></li><li>Null <ul><li>表示一个空对象指针</li><li>undefined值是派生自null的（null == undefined为true）</li><li>只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存为null</li></ul></li><li>Boolean</li><li>Number <ul><li>在进行算术计算时，所有以八进制和十六进制表示的数值最终都将被转换为十进制数值、</li><li>由于浮点数值需要的内存空间是保存整数值的两倍，因此ECMAScript会不失时机地将浮点数值转换为整数值</li><li>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。(0.1 + 0.2 = 0.30000000000000004)</li><li>NaN的特点是 <ul><li>任何涉及NaN的操作都会返回NaN</li><li>NaN与任何值都不相等包括它本身</li></ul></li></ul></li><li>String</li></ul></li><li>引用数据类型：Function、Object（Array、Date、Function、Error、RegExp、Math、Number、String、Boolean、Globle）<br> Object的每个实例都具有下列方法和属性 <ul><li>constructor: 保存着用于创建当前对象的函数</li><li>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中是否存在</li><li>isPrototypeOf(object): 用于检查传入的对象是否是当前对象的原型</li><li>propertyIsEnumerable(propertyName): 用于检查给定的属性是否能够使用for-in语句来枚举</li><li>toLocaleString(): 返回对象的字符串表示，该字符串与执行环境对应</li><li>toString(): 返回对象的字符串表示</li><li>valueOf(): 返回对象的字符串、数值或布尔值表示</li></ul></li><li>ES6新增：Symbol（Symbol类型的对象永远不相等，即便创建它们的时候传入了相同的值，因此，可借助此特性解决属性名的冲突问题，这也是该数据类型存在的主要用途，意为标记）</li></ul><h2 id="js数据类型的判断" tabindex="-1"><a class="header-anchor" href="#js数据类型的判断"><span>JS数据类型的判断</span></a></h2><ol><li><p>typeof 操作符</p><p><code>typeof</code> 操作符可能返回的值</p><ul><li>&quot;undefined&quot; 如果这个值未定义</li><li>&quot;boolean&quot; 如果这个值是布尔值</li><li>&quot;string&quot; 如果这个值是字符串</li><li>&quot;number&quot; 如果这个值是数值</li><li>&quot;object&quot; 如果这个值是对象或null</li><li>&quot;function&quot; 如果这个值是函数</li><li>&quot;symbol&quot; 如果这个值是Symbol</li></ul></li><li><p>instanceof 对象运算符</p><ul><li><code>obj1 instanceof obj2</code> 可以判断obj1是否为obj2的实例</li><li>obj2必须为对象，否则会报错</li><li>可以对不同的对象实例进行判断判断方法是根据对象的原型链依次向下查询，如果obj2的原型属性存在obj1的原型链上，（obj1 instanceof obj2）值为true</li><li>instanceof检测不到基本数据类型但是可以检测到使用下面的方式创建的num、str、boolean</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;abcdef&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 以上三种方式等同于new Object()，Object构造函数会根据传入值的类型返回相应基本包装类型的实例 </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>constructor 查看对象对应的构造函数</p><p>使用constructor是不保险的，因为constructor属性是可以被修改的，会导致检测出的结果不正确</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>constructor <span class="token operator">==</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>bool<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>constructor <span class="token operator">==</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> nul <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>nul<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> und <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>und<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> oDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>oDate<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>constructor <span class="token operator">==</span> RegExp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span>constructor <span class="token operator">==</span>Function<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Object.prototype.toString.call()</p><p>可以说不管是什么类型，它都可以立即判断出。<br><code>toString</code>是<code>Object</code>原型对象上的一个方法，该方法默认返回其调用者的具体类型，更严格的讲，是<code>toString</code>运行时this指向的对象类型，返回的类型格式为<code>[object xxx]</code>，xxx是具体的数据类型<br> 其中包括：<br><code>String,Number,Boolean,Undefined,Null,Function,Date,Array,RegExp,Error,HTMLDocument,... </code><br> 基本上所有对象的类型都可以通过这个方法获取到。</p></li><li><p>四种判断方法的比较</p><table><thead><tr><th style="text-align:center;">不同类型的优缺点</th><th>typeof</th><th>instanceof</th><th>constructor</th><th>Object.prototype.toString.call</th></tr></thead><tbody><tr><td style="text-align:center;">优点</td><td>使用简单</td><td>能检测出引用类型</td><td>基本能检测所有的类型（除了null和undefined）</td><td>检测出所有的类型</td></tr><tr><td style="text-align:center;">缺点</td><td>只能检测出基本类型(除null)</td><td>不能检测出基本类型，且不能跨iframe</td><td>constructor易被修改，也不能跨iframe</td><td>IE6下，undefined和null均为Object</td></tr></tbody></table></li><li><p>一些Tips</p><ul><li><code>null == undefined</code>是true，其实值undefined是null派生来的，因此ecmaScript把他们定义为相等的</li><li>判断一个对象<code>{}</code>是否为空对象的方法 <ul><li>用 <code>for in</code> 遍历属性<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">isEmptyObject</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token keyword">var</span> t<span class="token punctuation">;</span>  </span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token keyword">in</span> e<span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>  </span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token number">0</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>通过JSON自带的<code>.stringify()</code><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&#39;{}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;空对象&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>ES6新增的方法<code>Object.keys()</code><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;空对象&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;非空对象&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ol><h2 id="js数据类型的转换" tabindex="-1"><a class="header-anchor" href="#js数据类型的转换"><span>JS数据类型的转换</span></a></h2><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean"><span>Boolean</span></a></h3><p>Boolean()的转换规则</p><table><thead><tr><th style="text-align:center;">转换类型</th><th style="text-align:center;">转换为true的值</th><th style="text-align:center;">转换为false的值</th></tr></thead><tbody><tr><td style="text-align:center;">String =&gt; Boolean</td><td style="text-align:center;">非空字符串</td><td style="text-align:center;">空字符串</td></tr><tr><td style="text-align:center;">Number =&gt; Boolean</td><td style="text-align:center;">任何非零数字值（包括无穷大）</td><td style="text-align:center;">0和NaN</td></tr><tr><td style="text-align:center;">Object =&gt; Boolean</td><td style="text-align:center;">任何对象</td><td style="text-align:center;">null</td></tr><tr><td style="text-align:center;">Undefined =&gt; Boolean</td><td style="text-align:center;">not applicable</td><td style="text-align:center;">undefined</td></tr></tbody></table><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number"><span>Number</span></a></h3><ol><li><p><code>Number()</code></p><p>Number()的转换规则</p><ul><li><code>Boolead =&gt; Number</code> true和false将分别被转换为1和0</li><li><code>null =&gt; Number</code> 返回0</li><li><code>undefined =&gt; Number</code> 返回NaN</li><li><code>String =&gt; Number</code><ul><li>只包含数字则将其转换为十进制数值</li><li>包含有效的浮点格式则将其转换为对应的浮点数值</li><li>包含有效的十六进制格式，则将其转换为相同大小的十进制数值</li><li>空字符串转换为0</li><li>包含上述格式之外的字符转换为NaN</li></ul></li><li><code>Object =&gt; Number</code><ul><li>是对象则调用对象的valueOf() 方法，然后依照前面的规则转换返回的值，如果转换的结果是NaN，则调用对象的toString() 方法，然后再依照前面的规则转换返回的字符串值</li></ul></li></ul></li><li><p><code>parseInt()</code></p><p><code>Number()</code>在转换字符串时比较复杂而且不够合理，在处理整数的时候更常用<code>parseInt()</code></p><p>转换规则：从第一个非空格字符开始，如果第一个非空格字符不是数字字符或者负号，就会返回NaN，如果第一个非空格字符是数字字符，就会继续解析直到解析完所有字符或者遇到了一个非数字字符。</p><p>小数点不算做有效字符</p><p>第二个参数可以设置转换时使用的基数(即多少进制)</p></li><li><p><code>parseFloat()</code></p><p>转换规则与<code>parseInt()</code>相似，但是字符串中的第一个小数点是有效的，而第二个小数点都是无效的</p><p><code>parseInt()</code> 和 <code>parseFloat()</code>的区别</p><ul><li><code>parseFloat</code>的第一个小数点是有效的</li><li><code>parseFloat</code>始终都会忽略前导的0</li><li><code>parseFloat</code>只解析十进制值，因此他没有用第二个参数指定基数的用法，所以十六进制的字符串始终会被转换成0</li><li>如果字符串包含的是一个可解析为整数的值，<code>parseFloat</code>会返回整数</li></ul></li></ol><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3><ul><li><p><code>toString()</code></p><ul><li>数值、布尔值、对象和字符串值都有<code>toString()</code>方法但null和undefinded值没有这个方法</li><li>在调用数值的该方法时<code>toString()</code>也可以传递参数，参数为输出数值的基数</li></ul></li><li><p><code>String()</code><br> 在不知道要转换的值是不是null或undefined的情况下，还可以使用转型函数<code>String()</code>，这个函数能够将任何类型的值转换为字符串，转换规则如下：</p><ul><li>如果值有<code>toString()</code>方法，则调用该方法并返回相应的结果</li><li>如果值为null则返回&quot;null&quot;</li><li>如果值是undefined，则返回&quot;undefined&quot;</li></ul></li></ul><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object"><span>Object</span></a></h3><ul><li><code>toLocalString()</code>：返回对象的字符串表示，该字符串与执行环境的地区对应</li><li><code>toString()</code>：返回对象的字符串表示</li><li><code>valueOf()</code>：返回对象的字符串、数值或布尔值表示</li></ul><h3 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换"><span>隐式类型转换</span></a></h3><p>转换隐式类型转换指的是字符串和数值类型之间的转换</p><ul><li><p>在进行字符串和数字之间进行减乘除取模运算或者进行比较运算时，字符串会自动转换为数字。</p><p>转换数字的默认方法是调用<code>Number()</code></p></li><li><p>进行加法运算则是将数字看成字符串进行拼接</p></li></ul>`,17),p=[l];function o(c,i){return s(),a("div",null,p)}const r=n(t,[["render",o],["__file","js-datatype.html.vue"]]),d=JSON.parse('{"path":"/blogs_1/frontend/2019/js-datatype.html","title":"JS数据类型","lang":"en-US","frontmatter":{"title":"JS数据类型","tags":["前端","JavaScript"],"categories":["前端"],"date":"2019-10-14T00:00:00.000Z"},"headers":[{"level":2,"title":"JS数据类型","slug":"js数据类型","link":"#js数据类型","children":[]},{"level":2,"title":"JS数据类型的判断","slug":"js数据类型的判断","link":"#js数据类型的判断","children":[]},{"level":2,"title":"JS数据类型的转换","slug":"js数据类型的转换","link":"#js数据类型的转换","children":[{"level":3,"title":"Boolean","slug":"boolean","link":"#boolean","children":[]},{"level":3,"title":"Number","slug":"number","link":"#number","children":[]},{"level":3,"title":"String","slug":"string","link":"#string","children":[]},{"level":3,"title":"Object","slug":"object","link":"#object","children":[]},{"level":3,"title":"隐式类型转换","slug":"隐式类型转换","link":"#隐式类型转换","children":[]}]}],"git":{},"filePathRelative":"blogs_1/frontend/2019/js-datatype.md"}');export{r as comp,d as data};
