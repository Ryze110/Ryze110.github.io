import{_ as n,o as s,c as a,e as p}from"./app-UfWKxtAj.js";const e={},l=p(`<h2 id="组件注册" tabindex="-1"><a class="header-anchor" href="#组件注册"><span>组件注册</span></a></h2><h3 id="组件名" tabindex="-1"><a class="header-anchor" href="#组件名"><span>组件名</span></a></h3><ul><li>命名规范：字母全小写且必须包含一个连字符</li><li>使用 <code>kebab-case</code> 定义组件时引用时也必须使用 <code>kebab-case</code></li><li>使用 <code>PascalCase</code> 定义组件时引用时两种命名法都可以使用。</li></ul><h3 id="全局注册" tabindex="-1"><a class="header-anchor" href="#全局注册"><span>全局注册</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-component-name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ... 选项 ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="局部注册" tabindex="-1"><a class="header-anchor" href="#局部注册"><span>局部注册</span></a></h3><ol><li>定义组件</li><li>在components选项中引入组件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> ComponentA <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;component-a&#39;</span><span class="token operator">:</span> ComponentA</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块系统" tabindex="-1"><a class="header-anchor" href="#模块系统"><span>模块系统</span></a></h3><h4 id="在模块系统中局部注册" tabindex="-1"><a class="header-anchor" href="#在模块系统中局部注册"><span>在模块系统中局部注册</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./ComponentA&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    ComponentA</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基础组件的自动化全局注册" tabindex="-1"><a class="header-anchor" href="#基础组件的自动化全局注册"><span>基础组件的自动化全局注册</span></a></h4><ol><li>使用<code>require.context()</code>获取文件基础组件</li><li>遍历注册获得的基础组件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"><span class="token keyword">import</span> upperFirst <span class="token keyword">from</span> <span class="token string">&#39;lodash/upperFirst&#39;</span></span>
<span class="line"><span class="token keyword">import</span> camelCase <span class="token keyword">from</span> <span class="token string">&#39;lodash/camelCase&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> requireComponent <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token comment">// 其组件目录的相对路径</span></span>
<span class="line">  <span class="token string">&#39;./components&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 是否查询其子目录</span></span>
<span class="line">  <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 匹配基础组件文件名的正则表达式</span></span>
<span class="line">  <span class="token operator">/</span>Base<span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span>\\w<span class="token operator">+</span>\\<span class="token punctuation">.</span><span class="token punctuation">(</span>vue<span class="token operator">|</span>js<span class="token punctuation">)</span>$<span class="token operator">/</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">requireComponent<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fileName</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 获取组件配置</span></span>
<span class="line">  <span class="token keyword">const</span> componentConfig <span class="token operator">=</span> <span class="token function">requireComponent</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 获取组件的 PascalCase 命名</span></span>
<span class="line">  <span class="token keyword">const</span> componentName <span class="token operator">=</span> <span class="token function">upperFirst</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">camelCase</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token comment">// 获取和目录深度无关的文件名</span></span>
<span class="line">      fileName</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.\\w+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 全局注册组件</span></span>
<span class="line">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span></span>
<span class="line">    componentName<span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 如果这个组件选项是通过 \`export default\` 导出的，</span></span>
<span class="line">    <span class="token comment">// 那么就会优先使用 \`.default\`，</span></span>
<span class="line">    <span class="token comment">// 否则回退到使用模块的根。</span></span>
<span class="line">    componentConfig<span class="token punctuation">.</span>default <span class="token operator">||</span> componentConfig</span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prop" tabindex="-1"><a class="header-anchor" href="#prop"><span>Prop</span></a></h2><ul><li>Prop的大小写: 使用DOM中的模板时<code>camelCase</code>的 prop 名需要使用其等价的<code>kebab-case</code>命名</li><li>Prop的类型: props属性可以是字符串数组，也可以以对象的形式来指定prop的类型<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 字符串数组</span></span>
<span class="line"><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;isPublished&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;commentIds&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;author&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 对象</span></span>
<span class="line"><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">title</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">likes</span><span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">isPublished</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">commentIds</span><span class="token operator">:</span> Array<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">author</span><span class="token operator">:</span> Object<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">callback</span><span class="token operator">:</span> Function<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">contactsPromise</span><span class="token operator">:</span> Promise <span class="token comment">// or any other constructor</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>单向数据流: 父组件更新时子组件中的prop也会随之更新, 但在子组件中无法直接更新prop的值</li><li>Prop验证: <code>props</code>属性可以接受一个带有验证需求的对象<br> type支持<code>String、Number、Boolean、Array、Object、Date、Function、Symbol</code><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 基础的类型检查 (\`null\` 和 \`undefined\` 会通过任何类型验证)</span></span>
<span class="line">  <span class="token literal-property property">propA</span><span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 多个可能的类型</span></span>
<span class="line">  <span class="token literal-property property">propB</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 必填的字符串</span></span>
<span class="line">  <span class="token literal-property property">propC</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 带有默认值的数字</span></span>
<span class="line">  <span class="token literal-property property">propD</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 带有默认值的对象</span></span>
<span class="line">  <span class="token literal-property property">propE</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 对象或数组默认值必须从一个工厂函数获取</span></span>
<span class="line">    <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 自定义验证函数</span></span>
<span class="line">  <span class="token literal-property property">propF</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 这个值必须匹配下列字符串中的一个</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;danger&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>prop 会在一个组件实例创建之前进行验证，所以实例的属性 (如 data、computed 等) 在 default 或 validator 函数中是不可用的。</p></div></li></ul><h2 id="非prop的attribute" tabindex="-1"><a class="header-anchor" href="#非prop的attribute"><span>非Prop的Attribute</span></a></h2><ul><li>介绍：一个非 <code>prop</code> 的 <code>attribute</code> 是指传向一个组件，但是该组件并没有相应 prop 定义的 attribute。</li><li>替换：对于绝大多数 attribute 来说，从外部提供给组件的值会替换掉组件内部设置好的值。</li><li>合并：对于 <code>class</code> 和 <code>style</code> 来说，外部的值会和组件内部的值合并</li><li>禁用：在组件的选项中设置 <code>inheritAttrs: false</code>来禁止组件的根元素继承 attribute 配合实例的 $attrs 属性使用, 可以手动决定这些 attribute 会被赋予哪个元素<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;base-input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;label&gt;</span>
<span class="line">      {{ label }}</span>
<span class="line">      &lt;input</span>
<span class="line">        v-bind=&quot;$attrs&quot;</span>
<span class="line">        v-bind:value=&quot;value&quot;</span>
<span class="line">        v-on:input=&quot;$emit(&#39;input&#39;, $event.target.value)&quot;</span>
<span class="line">      &gt;</span>
<span class="line">    &lt;/label&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,18),t=[l];function i(c,o){return s(),a("div",null,t)}const u=n(e,[["render",i],["__file","vue-component.html.vue"]]),d=JSON.parse('{"path":"/blogs_1/frontend/2020/vue-component.html","title":"Vue组件笔记","lang":"en-US","frontmatter":{"title":"Vue组件笔记","date":"2020-03-31T00:00:00.000Z","tags":["前端","JavaScript","Vue"],"categories":["前端"]},"headers":[{"level":2,"title":"组件注册","slug":"组件注册","link":"#组件注册","children":[{"level":3,"title":"组件名","slug":"组件名","link":"#组件名","children":[]},{"level":3,"title":"全局注册","slug":"全局注册","link":"#全局注册","children":[]},{"level":3,"title":"局部注册","slug":"局部注册","link":"#局部注册","children":[]},{"level":3,"title":"模块系统","slug":"模块系统","link":"#模块系统","children":[]}]},{"level":2,"title":"Prop","slug":"prop","link":"#prop","children":[]},{"level":2,"title":"非Prop的Attribute","slug":"非prop的attribute","link":"#非prop的attribute","children":[]}],"git":{},"filePathRelative":"blogs_1/frontend/2020/vue-component.md"}');export{u as comp,d as data};
