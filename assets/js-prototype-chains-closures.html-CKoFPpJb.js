import{_ as n,o as s,c as a,e}from"./app-UfWKxtAj.js";const l={},p=e(`<h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链"><span>原型链</span></a></h2><ul><li>概念：JS里面的对象可能会有父对象，父对象还会有父对象</li><li>根本：原型链的根本是继承<br> 对象中几乎都有一个 <code>__proto__</code> 属性，指向他的父对象，可以实现让该对象访问到父对象种的相关属性</li><li>根对象：<code>Object.prototype</code><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// arr.__proto__: Array.prototype</span></span>
<span class="line"><span class="token comment">// arr.__proto__.__proto__: 根对象</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Animal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// cat.__proto__: Animal.prototype</span></span>
<span class="line"><span class="token comment">// cat.__proto__.__proto__: 根对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h2><h3 id="变量作用域" tabindex="-1"><a class="header-anchor" href="#变量作用域"><span>变量作用域</span></a></h3><ul><li>概念：一个变量可以使用的范围叫做变量作用域</li><li>全局作用域：最外层的作用域</li><li>独立作用域：JS中还可以通过函数创建出一个独立的作用域，其中函数可以嵌套，所以作用域也可以嵌套</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token comment">// 全局变量</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">f1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;haha&#39;</span> <span class="token comment">// f1函数内部的变量 </span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>变量的声明和赋值是在两个不同时期的<br> fn函数执行的时候，首先找到函数内部所有的变量、函数声明，把他们放在作用域中，给变量一个初始值undefined<br> 然后逐条执行代码，在执行代码的过程中，如果有赋值语句，对变量进行赋值</p></blockquote><h3 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链"><span>作用域链</span></a></h3><ul><li>概念：由于作用域是相对于变量而言的，而如果存在多级作用域，那变量的查找过程就叫做变量的作用域链</li><li>意义：查找变量 <ul><li>确定变量来自于那个作用域</li><li>变量是否可以访问</li></ul></li><li>难点：看上一级作用域，不是看函数在哪里调用，而是看函数在哪里编写，因为这种特别，我们通常会把作用域说成是词法作用域</li></ul><blockquote><p>查看当前作用域，如果当前作用域声名了这个变量，就确定结果，然后查找当前作用域的上级作用域，也就是当前函数的上级函数，看看上级函数中有没有声名，直到全局作用域为止，如果全局作用域中也没有，我们就认为这个变量没声明</p></blockquote><h3 id="闭包的产生" tabindex="-1"><a class="header-anchor" href="#闭包的产生"><span>闭包的产生</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token operator">++</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一般认为函数执行完毕，变量就会释放</li><li>但是由于js引擎发现匿名函数要使用a变量，所以a变量并不能得到释放，而是把a变量放在匿名函数可以访问到的地方去了。</li><li>a变量存在于f1函数可以访问到的地方，此时a变量只能被f1函数访问</li><li>再次执行fn会初始化一个新的a变量</li><li>可以通过 <code>f1 = null</code> 来释放f1里面保存的a变量</li></ul><h3 id="闭包的应用场景" tabindex="-1"><a class="header-anchor" href="#闭包的应用场景"><span>闭包的应用场景</span></a></h3><ul><li>模块化</li><li>防止变量被破坏</li></ul>`,15),t=[p];function i(c,o){return s(),a("div",null,t)}const u=n(l,[["render",i],["__file","js-prototype-chains-closures.html.vue"]]),d=JSON.parse('{"path":"/blogs_1/frontend/2019/js-prototype-chains-closures.html","title":"JS原型链、闭包","lang":"en-US","frontmatter":{"title":"JS原型链、闭包","tags":["前端","JavaScript"],"categories":["前端"],"date":"2019-10-14T00:00:00.000Z"},"headers":[{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[{"level":3,"title":"变量作用域","slug":"变量作用域","link":"#变量作用域","children":[]},{"level":3,"title":"作用域链","slug":"作用域链","link":"#作用域链","children":[]},{"level":3,"title":"闭包的产生","slug":"闭包的产生","link":"#闭包的产生","children":[]},{"level":3,"title":"闭包的应用场景","slug":"闭包的应用场景","link":"#闭包的应用场景","children":[]}]}],"git":{},"filePathRelative":"blogs_1/frontend/2019/js-prototype-chains-closures.md"}');export{u as comp,d as data};
